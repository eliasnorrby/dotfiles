# Use the xterm-256color terminal
set -g default-terminal "xterm-256color"

# Apply Tc
set-option -ga terminal-overrides ",xterm-256color:Tc"

# =============================================================================
# = Plugins ===================================================================
# =============================================================================
# set -g @plugin 'tmux-plugins/tmux-resurrect'

# set -g @resurrect-save 'C-s'
# set -g @resurrect-restore 'C-t'

# =============================================================================
# = Movement, splitting and resizing  =========================================
# =============================================================================
# Move around panes vim style
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R

# Split panes using | and -
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

bind \ split-window -h -p 20 -c "#{pane_current_path}"
bind _ split-window -v -p 20 -c "#{pane_current_path}"

unbind '"'
unbind %

# For resizing
bind-key C-j resize-pane -D 5
bind-key C-k resize-pane -U 5
bind-key C-L resize-pane -R 15
bind-key C-H resize-pane -L 15
setw -g aggressive-resize on

bind-key SPACE resize-pane -Z

# For keeping the C-L clear screen functionality
# bind C-l send-keys 'C-l'

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# Alternate solution?
# https://thoughtbot.com/blog/seamlessly-navigate-vim-and-tmux-splits
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l

# =============================================================================
# = Special behavior ==========================================================
# =============================================================================
# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Prompt to rename session right after it's created - not good when starting a
# brand new session
# set-hook -g after-new-session 'command-prompt -I "#{session_name}" "rename-session '%%'"'

bind-key C new-session

# Do not automatically name windows
set-window-option -g automatic-rename off
set-option -g set-titles off

# Reduce time to register ESC
set -s escape-time 0

# =============================================================================
# = Generic keybindings =======================================================
# =============================================================================
# Reload config file
# bind C-r source-file ~/.tmux.conf \; display "Config reloaded"
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Use m to toggle mouse
unbind m
bind-key m setw mouse

# Kill session
bind-key C-q kill-session

bind-key W last-window

# Use another prefix
unbind C-b
set -g prefix C-SPACE
bind C-SPACE send-prefix


# =============================================================================
# = For scrolling and copying =================================================
# =============================================================================
# Enable vim mode
set-window-option -g mode-keys vi

# vim-like keys to begin selection
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel

# bind prefix + / to search
bind-key / copy-mode \; send-key ?

# set -g mouse on
bind -Tcopy-mode WheelUpPane send -N1 -X scroll-up
bind -Tcopy-mode WheelDownPane send -N1 -X scroll-down

# TODO: Verify that this actually works
# Do not copy selection and cancel copy mode on drag end event
# Prefer iTerm style selection: select, then mouse click to copy to buffer
unbind -T copy-mode-vi MouseDragEnd1Pane
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
  send-keys -X copy-pipe "pbcopy" \;\
  send-keys -X clear-selection

# bind p paste-buffer
# bind C-p choose-buffer

# =============================================================================
# = Status bar & UI  ==========================================================
# =============================================================================
# Begin numbering windows with 1
set -g base-index 1

# Update status every 5 seconds
set-option -g status-interval 5

# Determine if remote or local session
if-shell 'test -n "$SSH_CLIENT"' \
  'set-environment -g IS_REMOTE_SESSION true' \
  'set-environment -gu IS_REMOTE_SESSION'

if-shell 'test -n "$IS_REMOTE_SESSION"' \
 'set -g status-position top' \
 'set -g status-position bottom'

# = Color =====================================================================
# Which colors do I even need?
# HIGHLIGHT                   : SHC1  : HLP
# SECONDARY HIGHLIGHT (ZOOM)  : SHC2  : HLS
# BACKGROUND                  : SBC?  : BGB
# GRAY BACKGROUND             : SGC?  : BGG
# WHITE BACKGROUND            :       : BGW
# BLACK
# WHITE

# Highlight Primary
if-shell 'test -n "$IS_REMOTE_SESSION"' \
 HLP=colour1 \
 HLP=colour4

# Highlight Secondary
HLS=colour3

# Base Colors
BLACK=colour0
WHITE=colour7
GRAY=colour8
ORANGE=colour3
RED=colour1

# Status dimensions
set -g status-left-length 50
set -g status-right-length 50

# Global colors
set -g status-style fg=white,bg=$BLACK

set -g window-status-activity-style bold

set -g pane-border-style fg=$GRAY

set -g pane-active-border-style fg=$HLS

set -g message-style fg=$BLACK,bg=$HLS,blink

# SEPLF=
# SEPRF=
# SEPL=
# SEPR=

SEPLF=
SEPRF=
SEPL=|
SEPR=

# Left status elements
ts_session="#[fg=$BLACK,bg=$WHITE] ❐ #S #[fg=$WHITE,bg=$GRAY]$SEPLF"
ts_user="#[fg=$HLS,bg=$GRAY] #(whoami) #[fg=$GRAY,bg=$BLACK]$SEPLF "

set -g status-left "$ts_session$ts_user"

# Window status elements
ts_window_number="#[fg=$BLACK,bg=$GRAY]$SEPLF#[fg=$WHITE,bg=$GRAY] #I $SEPL#[fg=$GRAY]"
ts_window_name="#[fg=$WHITE,bg=$GRAY] #W #[fg=$GRAY,bg=$BLACK]$SEPLF"

set -g window-status-format "$ts_window_number$ts_window_name"

# Current window status elements
ts_current_window_number="#[fg=$BLACK,bg=$HLP]$SEPLF#[fg=$BLACK,bg=$HLP] #I $SEPL"
ts_current_window_name=" #W #[fg=$HLP,bg=$BLACK]$SEPLF"

set -g window-status-current-format "$ts_current_window_number$ts_current_window_name"

# Right status elements
ts_prefix_indicator="#{?client_prefix,#[fg=$HLP]$SEPRF#[reverse] PREFIX #[noreverse]$SEPLF,}"
ts_zoomed_indicator="#{?window_zoomed_flag, #[fg=$HLS]$SEPRF#[reverse] Z #[noreverse]$SEPLF,}"
ts_time_date="#[fg=$GRAY,bg=$BLACK]$SEPRF#[fg=$HLS,bg=$GRAY] %H:%M #[fg=$WHITE,bg=$GRAY]$SEPRF#[fg=$BLACK,bg=WHITE] %d-%b-%y"
ts_host="#[fg=$HLP,bg=$BLACK]$SEPRF#[fg=$BLACK,bg=$HLP] #h  "
ts_load_average="#[fg=$WHITE] #(uptime | rev | cut -d":" -f1 | rev | sed s/,//g )"
ts_load_average_script="#($HOME/.dotfiles/scripts/uptime-tmux-status.sh $BLACK $ORANGE $RED $BLACK $WHITE)"

if-shell 'test -n "$IS_REMOTE_SESSION"' \
 'set -g status-right "$ts_prefix_indicator$ts_zoomed_indicator $ts_host "' \
 'set -g status-right "$ts_prefix_indicator$ts_zoomed_indicator $ts_load_average_script $ts_time_date "'

# set -g status-right "$ts_prefix_indicator$ts_zoomed_indicator $ts_host"
# Powerline LGM characters
#     

# For the future: you can use your own conditionals to display elements
# some_var=1
# {?some_var,#[fg=$HLP]#[reverse] PREFIX #[noreverse],}

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$IS_REMOTE_SESSION"' \
    'source-file ~/.dotfiles/tmux/tmux.remote.conf'

# Uncomment to source remote settings for testing
# source-file ~/.dotfiles/tmux/tmux.remote.conf

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run -b '~/.tmux/plugins/tpm/tpm'

