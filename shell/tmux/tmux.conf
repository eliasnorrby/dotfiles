set -g default-terminal "tmux-256color"
set -sa terminal-overrides ",${TERM}:RGB"

# =============================================================================
# = Movement, splitting and resizing  =========================================
# =============================================================================
bind -n C-s display-popup -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"
bind V new-window -n scratch nvim
bind D new-window -n dotfiles "cd ~/.dotfiles; nvim"
bind T new-window -n tmp "cd $(mktemp -d); exec zsh"
bind K new-window -n k9s k9s
bind B new-window -n repl bash_repl

# Git bindings
bind b display-popup -EE -d "#{pane_current_path}" -w '85%' -h '85%' fuzzy_branch
bind G display-popup -E -B -w '85%' -h '85%' gh_browse
bind p run-shell "cd #{pane_current_path} && gh pr view -w"
bind P display-popup -EE -d "#{pane_current_path}" -w '85%' -h '85%' gh_browse_pull

bind s display-popup -E -d "#{pane_current_path}" -w '85%' -h '85%' select_and_run_package_script
bind S display-popup -E -d "#{pane_current_path}" -w '85%' -h '85%' 'select_and_run_package_script append'

bind C-n new-window -n "notes" "notes_global_entry"

bind n run-shell "$TMUX_HOME/scripts/go_to_next_alert.sh"

# Split panes using | and -
bind \\ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Emacs like bindings
bind v split-window -h -c "#{pane_current_path}"

bind | split-window -h -p 20 -c "#{pane_current_path}"
bind _ split-window -v -p 20 -c "#{pane_current_path}"

unbind '"'
unbind %

# For resizing
bind-key -r C-j resize-pane -D 5
bind-key -r C-k resize-pane -U 5
bind-key -r C-L resize-pane -R 15
bind-key -r C-H resize-pane -L 15
setw -g aggressive-resize on

bind-key SPACE resize-pane -Z

# For keeping the C-L clear screen functionality
# bind C-l send-keys 'C-l'

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# Alternate solution?
# https://thoughtbot.com/blog/seamlessly-navigate-vim-and-tmux-splits

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
# bind-key -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
# bind-key -T copy-mode-vi C-\\ select-pane -l

bind-key -n F1 select-window -t 1
bind-key -n F2 select-window -t 2
bind-key -n F3 select-window -t 3
bind-key -n F4 select-window -t 4
bind-key -n F5 select-window -t 5
bind-key -n F6 select-window -t 6
bind-key -n F7 select-window -t 7
bind-key -n F8 select-window -t 8

# bind-key -n C-h "select-pane -L"
# bind-key -n C-j "select-pane -D"
# bind-key -n C-k "select-pane -U"
# bind-key -n C-l "select-pane -R"

# =============================================================================
# = Special behavior ==========================================================
# =============================================================================
set -g renumber-windows on  # renumber windows when a window is closed

# Prompt to rename window right after it's created
# set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'
bind c new-window -c "#{pane_current_path}" \; command-prompt -p " Window name:" -I "#{window_name}" "rename-window '%%'"
bind z new-window \; command-prompt -p " Window name:" "rename-window '#{?#{!=:%1,''},%1,zsh}' \; send-keys z ' %1' C-m"
bind Z rename-window "#{b:pane_current_path}"

# set-hook -g after-new-session 'command-prompt -I "#{session_name}" "rename-session '%%'"'
bind-key C new-session \; command-prompt -p " Session name:" -I "#{session_name}" "rename-session '%%'"

# Do not automatically name windows
set-window-option -g automatic-rename off
set-option -g set-titles off

# Reduce time to register ESC
set -s escape-time 0

# To make autoread work in vim
set-option -g focus-events on

# =============================================================================
# = Generic keybindings =======================================================
# =============================================================================
# Reload config file
bind C-r source-file $TMUX_HOME/tmux.conf \; display " Config reloaded"

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Toggle status
bind g run-shell "$TMUX_HOME/scripts/toggle_status.sh"

# Use m to toggle mouse
unbind m
bind-key m setw mouse

# Kill session
bind-key C-q kill-session

bind-key W last-window

# Use another prefix
unbind C-b
set -g prefix C-SPACE
# bind C-SPACE send-prefix
bind C-SPACE send-keys C-SPACE

# set -g prefix C-a
# bind C-a send-prefix
# bind C-a send-keys C-a

# =============================================================================
# = For scrolling and copying =================================================
# =============================================================================
# Enable vim mode
set-window-option -g mode-keys vi

# vim-like keys to begin selection
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'copy_cmd'

# bind prefix + / to search
bind-key / copy-mode \; send-key ?

# set -g mouse on
bind -Tcopy-mode WheelUpPane send -N1 -X scroll-up
bind -Tcopy-mode WheelDownPane send -N1 -X scroll-down

# TODO: Verify that this actually works
# Do not copy selection and cancel copy mode on drag end event
# Prefer iTerm style selection: select, then mouse click to copy to buffer
unbind -T copy-mode-vi MouseDragEnd1Pane
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
  send-keys -X copy-pipe 'copy_cmd' \;\
  send-keys -X clear-selection

# bind b copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "‚ùØ"
bind y copy-mode\; send-keys -X search-backward "http"\; send-keys V
# bind p paste-buffer
# bind C-p choose-buffer

# =============================================================================
# = Status bar & UI  ==========================================================
# =============================================================================
# Begin numbering windows with 1
set -g base-index 1

# Update status every 5 seconds
set-option -g status-interval 5

# Determine if remote or local session
if-shell 'test -n "$SSH_CLIENT"' \
  'set-environment -g IS_REMOTE_SESSION true' \
  'set-environment -gu IS_REMOTE_SESSION'

if-shell 'test -n "$IS_REMOTE_SESSION"' \
  'set -g status-position top' \
  'set -g status-position bottom'

source "$TMUX_HOME/tmux.theme.conf"

if-shell 'test -n "$IS_REMOTE_SESSION"' \
 'set -g status-right "$ts_right_status_remote"' \
 'set -g status-right "$ts_right_status"'

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$IS_REMOTE_SESSION"' \
    'source-file $TMUX_HOME/tmux.remote.conf'

set-option -g visual-bell both
set-option -g bell-action other

set-option -g display-time 1500

# Resetting to default needed for reloading config
set -gu status-format
set -gu status

set -g status 2
set -Fg 'status-format[1]' '#{status-format[0]}'
set -g 'status-format[0]' ''

# =============================================================================
# = Extensions ================================================================
# =============================================================================

source-file "$TMUX_HOME/extensions/bemlo.conf"

# Uncomment to source remote settings for testing
# source-file $TMUX_HOME/tmux.remote.conf
