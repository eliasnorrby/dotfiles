[alias]
  a = add
  aa = add -A
  f = fetch
  fm = fetch origin master:master
  p = push
  pu = push -u
  m = merge
  s = status
  c = commit -v
  cr = reset --soft HEAD~
  b = branch
  d = diff
  dc = diff --cached
  co = checkout
  empty = commit --allow-empty -m
  prevmessage = log --format=%B -1
  cm = "!f() { git co master 2>&1 | grep -v 'did not match any' || git co main; }; f"
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' --abbrev-commit
  lgs = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s' --abbrev-commit
  lgb = lg --branches
  extend = commit --amend --no-edit
  amend = commit --amend
  r = rebase
  rc = rebase --continue
  ra = rebase --abort
  rr = rebase --autostash
  rs = rebase -i --autosquash --autostash
  ro = rebase --autostash origin/master
  rom = rebase --onto origin/master
  # 'Remote Prune'
  rp = remote prune origin
  rv = remote -v
  # 'Current Branch'
  cb = branch --show-current
  # 'Remote Branch'
  rb = "!f() { echo \"origin/$(git cb)\"; }; f"
  # 'Merge Tracking branch'
  mt = "!f() { git merge $(git rb); }; f"
  # 'Rebase Tracking branch'
  rt = "!f() { git fetch && git rr; }; f"
  # 'Force Push'
  fp = "!f() { git push --force-with-lease origin $(git cb); }; f"
  # 'Branch Pruner'
  bp = "!f() { branch_pruner; }; f"
  # 'Branch Delete': Delete merged branches
  bdelete = "!f() { git branch --merged | grep -Ev '(\\*|master|main|develop)' | xargs -n 1 git branch -d; }; f"
  # Delete squashed branches (https://github.com/not-an-aardvark/git-delete-squashed)
	delete-squashed = "!f() { local targetBranch=${1:-master} && git checkout -q $targetBranch && git branch --merged | grep -v \"\\*\" | xargs -n 1 git branch -d && git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base $targetBranch $branch) && [[ $(git cherry $targetBranch $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == \"-\"* ]] && git branch -D $branch; done; }; f"
  # 'Branch Clean'
  bclean = "!git rp && git bdelete"
  # 'Pull Request Delete': Checkout main branch, deleting the current one
  prd = "!f() { branch=$(git cb); if git checkout master || git checkout main; then git branch -D $branch; fi }; f"
  prm = "!f() { git prd; git rt; }; f"
  z = stash
  zp = stash pop
  za = stash apply
  # 'Stash Everything'
  ze = "!f() { git stash push -u -m \"$1\"; }; f"
  # 'Quick Save': Create a stash and reapply the changes
  qs = "!f() { git ze \"$1\" && git za; }; f"
  # 'Log Remote': Compare current branch to tracking branch
  lr = "!f() { git lg ..$(git rb); }; f"
  alias = "!git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /"
  fa = "!f() { selected=$(git alias | fzf | cut -d '=' -f1); [[ -n $selected ]] && echo git $selected && git $selected; }; f"

# vim: ft=gitconfig
