#!/usr/bin/env zsh
# env -- envvars & standard library for dotfiles; don't symlink me!
# Can be sourced by zsh/bash scripts

export XDG_CACHE_HOME=~/.cache
export XDG_CONFIG_HOME=~/.config
export XDG_DATA_HOME=~/.local/share
export XDG_BIN_HOME=~/.local/bin

export DOTFILES="$(cd $(dirname "${BASH_SOURCE:-${(%):-%x}}") && pwd -P)"
export DOTFILES_DATA="$XDG_DATA_HOME/dotfiles"
export DOTFILES_ASSETS="$DOTFILES/assets"

for dir in "$XDG_CACHE_HOME" "$XDG_CONFIG_HOME" "$XDG_DATA_HOME" "$XDG_BIN_HOME" "$DOTFILES_DATA"; do
  [[ -d $dir ]] || mkdir -p "$dir"
done

## Library, curtesy of hlissner
## https://github.com/hlissner/dotfiles/blob/master/env

# check if we're in an interactive session
function _is_interactive { [[ $- == *i* || -n $EMACS ]]; }

# check if a process is running
function _is_running {
  for prc in "$@"; do
    pgrep -x "$prc" >/dev/null || return 1
  done
}

# check if a command is available
function _is_callable {
  for cmd in "$@"; do
    command -v "$cmd" >/dev/null || return 1
  done
}

# source a file, fail silently if it doesn't exist
function _source {
  [[ -f $1 ]] && source "$1"
}

# source a file, either with an absolute path,
# or relative to dotfiles.
#
#   _load shell/zsh/completion.zsh
#
function _load {
  case $1 in
    /*) source "$1" ;;
    *)  source "$DOTFILES/$1" ;;
  esac
}

# load a file from all enabled topics
#
#   _load_all env.zsh
#
# ~/.local/share/dotfiles/
# ├── editor.vim.topic
# │   └── env.zsh
# └── shell.zsh.topic
#     └── env.zsh
#
function _load_all {
  for file in "$DOTFILES_DATA"/*.topic/"$1"; do
    [[ -e $file ]] && source "$file"
  done
}

# makes sure a repo is cloned to the destination,
# clones it otherwise
#
#   _ensure_repo eliasnorrby/dotfiles ~/.dotfiles
#
function _ensure_repo {
  local target=$1
  local dest=$2
  if [[ ! -d $dest ]]; then
    if [[ $target =~ "^[^/]+/[^/]+$" ]]; then
      url=https://github.com/$target
    elif [[ $target =~ "^[^/]+$" ]]; then
      url=git@github.com:$USER/$target.git
    fi
    [[ -n ${dest%/*} ]] && mkdir -p ${dest%/*}
    git clone --recursive "$url" "$dest" || return 1
  fi
}

# check os for branching
#
#   [[ $(_os) == "macos" ]] && brew install something
#
function _os {
  case $OSTYPE in
    linux*) if   [[ -f /etc/arch-release   ]]; then echo arch
            elif [[ -f /etc/debian_version ]]; then echo debian
            fi ;;
    darwin*) echo macos ;;
    cygwin*) echo cygwin ;;
  esac
}
